type GraphDatabase {

    identifier: ID!
 
    state: String!
    
    port: Int!

    contentDefinition: ContentDefinition
    
    hierarchicalGraphs: [HierarchicalGraph!]!
    
    hierarchicalGraph(identifier: ID!): HierarchicalGraph
}

type HierarchicalGraph {

}

type MvnBasedContentDefinition {

    coordinates: [MvnCoordinate!]!
}

union ContentDefinition = MvnBasedContentDefinition

type MvnCoordinate {

    # the group id
    groupId: String!

    # the artifact id
    artifactId: String!

    # the version
    version: String!
}

# The Query type
extend type Query {

    graphDatabases: [GraphDatabase!]!

    graphDatabase(identifier: ID!): GraphDatabase
    
    hierarchicalGraph(databaseIdentifier: ID!, hierarchicalGraphIdentifier: ID!): HierarchicalGraph
}

# The Mutation type
extend type Mutation {

    newGraphDatabase(identifier: ID!): GraphDatabase
    
	populateGraphDatabase(identifier: ID!): GraphDatabase
    
    startGraphDatabase(identifier: ID!): GraphDatabase
    
    stopGraphDatabase(identifier: ID!): GraphDatabase

    setMvnBasedContentDefinition(identifier: ID!, coords: [String]!): GraphDatabase

    createHierarchicalGraph(databaseId: ID!, hierarchicalGraphId: ID!): GraphDatabase
}
