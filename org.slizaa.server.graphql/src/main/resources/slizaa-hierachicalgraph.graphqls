extend type HierarchicalGraph {

    # Returns the identifier
    identifier: ID!

	# Returns the identifier
    globalIdentifier: ID!

    # Returns the root node
    rootNode: Node!

    # Returns the node with the given id
    node(id: ID!): Node

    # Returns the nodes with the given ids
    nodes(ids: [ID]!): [Node]!

    #
    dependencyMatrix(ids: [ID]!): DependencyMatrix!
}

type Node {

    # The symbolicName for this node
    id: ID!

    # The text label
    text: String!
    imageUrl: String!

    # The parent node
    parent: Node
    predecessors: [Node]!

    #
    hasChildren: Boolean

    # The children
    children: [Node]!

    #
    properties: [MapEntry]!

    #
    dependenciesTo(targetNodes: [ID]!): [Dependency]!
}

type Dependency {
    id: ID!
    sourceNode: Node!
    targetNode: Node!
    weight: Int
}


type MapEntry { key: String!, value: String }

type DependencyMatrix {
    orderedNodes: [ Node ]!
    cells: [Cell]!
#    matrix: [[ Int ]]
#    dependencies: [[ Dependency ]]
}

type DependencyMatrix {
    orderedNodes: [ Node ]!
    cells: [Cell]!
    #    matrix: [[ Int ]]
    #    dependencies: [[ Dependency ]]
}

type Cell {
    row: Int!
    column: Int!
    value: Int!
}

